//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel.DataEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class alluneedbEntities : DbContext
    {
        public alluneedbEntities()
            : base("name=alluneedbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Classification> Classifications { get; set; }
        public virtual DbSet<ClassificationScheme> ClassificationSchemes { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<ContentComment> ContentComments { get; set; }
        public virtual DbSet<ContentItem> ContentItems { get; set; }
        public virtual DbSet<ContentTag> ContentTags { get; set; }
        public virtual DbSet<DisplayContent> DisplayContents { get; set; }
        public virtual DbSet<MediaContent> MediaContents { get; set; }
        public virtual DbSet<Microsite> Microsites { get; set; }
        public virtual DbSet<RelatedContentItem> RelatedContentItems { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserClaim> UserClaims { get; set; }
        public virtual DbSet<Userhist> Userhists { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserRegistrationToken> UserRegistrationTokens { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<TransactionHi> TransactionHis { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<OrderProduct> OrderProducts { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<ShippingAddress> ShippingAddresses { get; set; }
        public virtual DbSet<MicroClassification> MicroClassifications { get; set; }
        public virtual DbSet<GeoArea> GeoAreas { get; set; }
        public virtual DbSet<PromotionContent> PromotionContents { get; set; }
        public virtual DbSet<NotifiRequest> NotifiRequests { get; set; }
        public virtual DbSet<CountLike> CountLikes { get; set; }
        public virtual DbSet<ProductInforExt> ProductInforExts { get; set; }
        public virtual DbSet<Hotel> Hotels { get; set; }
        public virtual DbSet<Tour> Tours { get; set; }
        public virtual DbSet<ObjectRelate> ObjectRelates { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
    
        public virtual int GetDataUserInfor(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDataUserInfor", usernameParameter);
        }
    
        public virtual int GetDataUserInforMoney(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDataUserInforMoney", usernameParameter);
        }
    
        public virtual int GetDataUserInforTransferMoney(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDataUserInforTransferMoney", usernameParameter);
        }
    }
}
